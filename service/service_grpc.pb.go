// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.3
// source: service/service.proto

package service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryUserClient is the client API for QueryUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryUserClient interface {
	GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error)
}

type queryUserClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryUserClient(cc grpc.ClientConnInterface) QueryUserClient {
	return &queryUserClient{cc}
}

func (c *queryUserClient) GetUser(ctx context.Context, in *UserRequest, opts ...grpc.CallOption) (*UserReply, error) {
	out := new(UserReply)
	err := c.cc.Invoke(ctx, "/QueryUser/GetUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryUserServer is the server API for QueryUser service.
// All implementations must embed UnimplementedQueryUserServer
// for forward compatibility
type QueryUserServer interface {
	GetUser(context.Context, *UserRequest) (*UserReply, error)
	mustEmbedUnimplementedQueryUserServer()
}

// UnimplementedQueryUserServer must be embedded to have forward compatible implementations.
type UnimplementedQueryUserServer struct {
}

func (UnimplementedQueryUserServer) GetUser(context.Context, *UserRequest) (*UserReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUser not implemented")
}
func (UnimplementedQueryUserServer) mustEmbedUnimplementedQueryUserServer() {}

// UnsafeQueryUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryUserServer will
// result in compilation errors.
type UnsafeQueryUserServer interface {
	mustEmbedUnimplementedQueryUserServer()
}

func RegisterQueryUserServer(s grpc.ServiceRegistrar, srv QueryUserServer) {
	s.RegisterService(&QueryUser_ServiceDesc, srv)
}

func _QueryUser_GetUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryUserServer).GetUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueryUser/GetUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryUserServer).GetUser(ctx, req.(*UserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryUser_ServiceDesc is the grpc.ServiceDesc for QueryUser service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryUser_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "QueryUser",
	HandlerType: (*QueryUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUser",
			Handler:    _QueryUser_GetUser_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}

// QueryAllClient is the client API for QueryAll service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryAllClient interface {
	GetAll(ctx context.Context, in *All, opts ...grpc.CallOption) (*All, error)
}

type queryAllClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryAllClient(cc grpc.ClientConnInterface) QueryAllClient {
	return &queryAllClient{cc}
}

func (c *queryAllClient) GetAll(ctx context.Context, in *All, opts ...grpc.CallOption) (*All, error) {
	out := new(All)
	err := c.cc.Invoke(ctx, "/QueryAll/GetAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryAllServer is the server API for QueryAll service.
// All implementations must embed UnimplementedQueryAllServer
// for forward compatibility
type QueryAllServer interface {
	GetAll(context.Context, *All) (*All, error)
	mustEmbedUnimplementedQueryAllServer()
}

// UnimplementedQueryAllServer must be embedded to have forward compatible implementations.
type UnimplementedQueryAllServer struct {
}

func (UnimplementedQueryAllServer) GetAll(context.Context, *All) (*All, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAll not implemented")
}
func (UnimplementedQueryAllServer) mustEmbedUnimplementedQueryAllServer() {}

// UnsafeQueryAllServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryAllServer will
// result in compilation errors.
type UnsafeQueryAllServer interface {
	mustEmbedUnimplementedQueryAllServer()
}

func RegisterQueryAllServer(s grpc.ServiceRegistrar, srv QueryAllServer) {
	s.RegisterService(&QueryAll_ServiceDesc, srv)
}

func _QueryAll_GetAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(All)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryAllServer).GetAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/QueryAll/GetAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryAllServer).GetAll(ctx, req.(*All))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryAll_ServiceDesc is the grpc.ServiceDesc for QueryAll service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryAll_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "QueryAll",
	HandlerType: (*QueryAllServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetAll",
			Handler:    _QueryAll_GetAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service/service.proto",
}
